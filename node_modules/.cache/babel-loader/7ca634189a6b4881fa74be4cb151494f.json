{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createUserWithEmailAndPassword, getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut, updateProfile } from \"firebase/auth\";\nimport { useEffect, useState } from \"react\";\nimport initializeAuthenticaiton from \"../Firebase/firebase.init\"; // initialize firebase\n\ninitializeAuthenticaiton();\n\nconst useFirebase = () => {\n  _s();\n\n  const auth = getAuth();\n  const [user, setUser] = useState({});\n  const [isLoading, setIsLoading] = useState(true); // for checking if the user is admin or not\n\n  const [admin, setAdmin] = useState(false); //   register user\n\n  const registerUser = (email, password) => {\n    setIsLoading(true); // i am just returning the promise here to do some extrea things on sign up page\n\n    return createUserWithEmailAndPassword(auth, email, password);\n  }; //  login with email and password\n\n\n  const loginWithEmail = (email, password) => {\n    setIsLoading(true);\n    return signInWithEmailAndPassword(auth, email, password);\n  }; // save user details for after register\n\n\n  const saveUser = (email, displayName, mobile, location, nidNo, imgUrl) => {\n    const user = {\n      email,\n      displayName,\n      mobile,\n      location,\n      nidNo,\n      imgUrl\n    };\n    console.log(user);\n    fetch(\"http://localhost:5000/users\", {\n      method: \"POST\",\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(json => {\n      console.log(json);\n    }).catch(err => {\n      console.log(`Here's the error  from firebase ${err}`);\n    });\n  }; //   logout user\n\n\n  const logOut = () => {\n    setIsLoading(true);\n    signOut(auth).then(() => {\n      alert(\"Logout successfull\");\n    }).finally(() => setIsLoading(false));\n  }; // update user name while user sign up\n\n\n  const updateName = name => {\n    updateProfile(auth.currentUser, {\n      displayName: name\n    }).then(() => {});\n  }; // setting an observer to hanlde user state\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser({});\n      }\n\n      setIsLoading(false);\n    }); // this clean up function is for better performance a little bit\n\n    return () => unsubscribe;\n  }, []); // cheking if the user is admin or not\n\n  useEffect(() => {\n    const url = `http://localhost:5000/users/${user.email}`;\n    axios.get(url).then(res => {\n      const user = res.data[0];\n\n      if ((user === null || user === void 0 ? void 0 : user.role) === \"admin\") {\n        setAdmin(true);\n      }\n    });\n  }, []);\n  return {\n    user,\n    setUser,\n    registerUser,\n    updateName,\n    isLoading,\n    setIsLoading,\n    loginWithEmail,\n    logOut,\n    saveUser,\n    admin\n  };\n};\n\n_s(useFirebase, \"wk0P34KKrnIOuQmaZGCuhHstwpA=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["G:/CODE/Development/Projects/Frontend/project_fronend/src/hooks/useFirebase.js"],"names":["axios","createUserWithEmailAndPassword","getAuth","onAuthStateChanged","signInWithEmailAndPassword","signOut","updateProfile","useEffect","useState","initializeAuthenticaiton","useFirebase","auth","user","setUser","isLoading","setIsLoading","admin","setAdmin","registerUser","email","password","loginWithEmail","saveUser","displayName","mobile","location","nidNo","imgUrl","console","log","fetch","method","body","JSON","stringify","headers","then","response","json","catch","err","logOut","alert","finally","updateName","name","currentUser","unsubscribe","url","get","res","data","role"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  getAuth,\r\n  onAuthStateChanged,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  updateProfile,\r\n} from \"firebase/auth\";\r\nimport { useEffect, useState } from \"react\";\r\nimport initializeAuthenticaiton from \"../Firebase/firebase.init\";\r\n\r\n// initialize firebase\r\ninitializeAuthenticaiton();\r\n\r\nconst useFirebase = () => {\r\n  const auth = getAuth();\r\n  const [user, setUser] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // for checking if the user is admin or not\r\n  const [admin, setAdmin] = useState(false);\r\n\r\n  //   register user\r\n  const registerUser = (email, password) => {\r\n    setIsLoading(true);\r\n    // i am just returning the promise here to do some extrea things on sign up page\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  };\r\n  //  login with email and password\r\n  const loginWithEmail = (email, password) => {\r\n    setIsLoading(true);\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  };\r\n\r\n  // save user details for after register\r\n  const saveUser = (email, displayName, mobile, location, nidNo, imgUrl) => {\r\n    const user = { email, displayName, mobile, location, nidNo, imgUrl };\r\n    console.log(user);\r\n    fetch(\"http://localhost:5000/users\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(user),\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        console.log(json);\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Here's the error  from firebase ${err}`);\r\n      });\r\n  };\r\n\r\n  //   logout user\r\n  const logOut = () => {\r\n    setIsLoading(true);\r\n    signOut(auth)\r\n      .then(() => {\r\n        alert(\"Logout successfull\");\r\n      })\r\n      .finally(() => setIsLoading(false));\r\n  };\r\n\r\n  // update user name while user sign up\r\n  const updateName = (name) => {\r\n    updateProfile(auth.currentUser, {\r\n      displayName: name,\r\n    }).then(() => {});\r\n  };\r\n\r\n  // setting an observer to hanlde user state\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        setUser(user);\r\n      } else {\r\n        setUser({});\r\n      }\r\n      setIsLoading(false);\r\n    });\r\n    // this clean up function is for better performance a little bit\r\n    return () => unsubscribe;\r\n  }, []);\r\n\r\n  // cheking if the user is admin or not\r\n  useEffect(() => {\r\n    const url = `http://localhost:5000/users/${user.email}`;\r\n    axios.get(url).then((res) => {\r\n      const user = res.data[0];\r\n      if (user?.role === \"admin\") {\r\n        setAdmin(true);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return {\r\n    user,\r\n    setUser,\r\n    registerUser,\r\n    updateName,\r\n    isLoading,\r\n    setIsLoading,\r\n    loginWithEmail,\r\n    logOut,\r\n    saveUser,\r\n    admin,\r\n  };\r\n};\r\nexport default useFirebase;\r\n"]},"metadata":{},"sourceType":"module"}